import os
import pickle
import torch
import random
import numpy as np
from torch.utils.data import Dataset,BatchSampler


class CustomBatchSampler(BatchSampler):
    def __iter__(self):
        batch = []
        for idx in self.sampler:
            batch.append(idx)
            if len(batch) == self.batch_size:
                input_ids_batch, attention_mask_batch, token_type_ids_batch, paragraph_mask_batch, table_mask_batch, \
                    paragraph_index_batch, table_cell_index_batch, tag_labels_batch, operator_labels_batch, scale_labels_batch, \
                    gold_answers_batch, paragraph_tokens_batch, table_cell_tokens_batch, paragraph_numbers_batch, \
                    table_cell_numbers_batch, question_ids_batch, ari_ops_batch, \
                    opt_labels_batch, ari_labels_batch, opt_mask_batch, order_labels_batch, \
                    selected_indexes_batch, question_mask_batch = zip(*batch)

                bsz = self.batch_size
                input_ids = torch.LongTensor(bsz, 512)
                attention_mask = torch.LongTensor(bsz, 512)
                token_type_ids = torch.LongTensor(bsz, 512).fill_(0)
                paragraph_mask = torch.LongTensor(bsz, 512)
                table_mask = torch.LongTensor(bsz, 512)
                question_mask = torch.LongTensor(bsz, 512)
                paragraph_index = torch.LongTensor(bsz, 512)
                table_cell_index = torch.LongTensor(bsz, 512)
                tag_labels = torch.LongTensor(bsz, 512)
                operator_labels = torch.LongTensor(bsz)
                scale_labels = torch.LongTensor(bsz)
                ari_labels = torch.LongTensor([])
                selected_indexes = np.zeros([1, 11])
                opt_mask = torch.LongTensor(bsz)
                ari_ops = torch.LongTensor(bsz, self.num_ops)
                opt_labels = torch.LongTensor(bsz, self.num_ops - 1, self.num_ops - 1)
                order_labels = torch.LongTensor(bsz, self.num_ops)

                paragraph_tokens = []
                table_cell_tokens = []
                gold_answers = []
                question_ids = []
                paragraph_numbers = []
                table_cell_numbers = []
                for i in range(bsz):
                    input_ids[i] = input_ids_batch[i]
                    attention_mask[i] = attention_mask_batch[i]
                    token_type_ids[i] = token_type_ids_batch[i]
                    paragraph_mask[i] = paragraph_mask_batch[i]
                    table_mask[i] = table_mask_batch[i]
                    paragraph_index[i] = paragraph_index_batch[i]
                    opt_mask[i] = opt_mask_batch[i]
                    question_mask[i] = question_mask_batch[i]
                    table_cell_index[i] = table_cell_index_batch[i]
                    tag_labels[i] = tag_labels_batch[i]
                    operator_labels[i] = operator_labels_batch[i]
                    ari_ops[i] = torch.LongTensor(ari_ops_batch[i])
                    if len(selected_indexes_batch[i]) != 0:
                        ari_labels = torch.cat((ari_labels, ari_labels_batch[i]), dim=0)
                        num = selected_indexes_batch[i].shape[0]
                        sib = np.zeros([num, 11])
                        for j in range(num):
                            sib[j, 0] = i
                            try:
                                sib[j, 1:] = selected_indexes_batch[i][j]
                            except:
                                print(selected_indexes_batch[i][j])
                                sib[j, 1:] = selected_indexes_batch[i][j][:10]
                        selected_indexes = np.concatenate((selected_indexes, sib), axis=0)
                    order_labels[i] = order_labels_batch[i]
                    opt_labels[i] = opt_labels_batch[i]
                    scale_labels[i] = scale_labels_batch[i]
                    paragraph_tokens.append(paragraph_tokens_batch[i])
                    table_cell_tokens.append(table_cell_tokens_batch[i])
                    paragraph_numbers.append(paragraph_numbers_batch[i])
                    table_cell_numbers.append(table_cell_numbers_batch[i])
                    gold_answers.append(gold_answers_batch[i])
                    question_ids.append(question_ids_batch[i])
                out_batch = {"input_ids": input_ids, "attention_mask": attention_mask, "token_type_ids": token_type_ids,
                             "paragraph_mask": paragraph_mask, "paragraph_index": paragraph_index,
                             "tag_labels": tag_labels,
                             "operator_labels": operator_labels, "scale_labels": scale_labels,
                             "paragraph_tokens": paragraph_tokens,
                             "table_cell_tokens": table_cell_tokens, "paragraph_numbers": paragraph_numbers,
                             "table_cell_numbers": table_cell_numbers, "gold_answers": gold_answers,
                             "question_ids": question_ids,
                             "table_mask": table_mask, "table_cell_index": table_cell_index, "ari_ops": ari_ops,
                             "ari_labels": ari_labels, "opt_labels": opt_labels, "opt_mask": opt_mask,
                             "order_labels": order_labels,
                             "selected_indexes": selected_indexes[1:], "question_mask": question_mask
                             }
                yield out_batch
                batch = []
        if len(batch) > 0:
            input_ids_batch, attention_mask_batch, token_type_ids_batch, paragraph_mask_batch, table_mask_batch, \
                paragraph_index_batch, table_cell_index_batch, tag_labels_batch, operator_labels_batch, scale_labels_batch, \
                gold_answers_batch, paragraph_tokens_batch, table_cell_tokens_batch, paragraph_numbers_batch, \
                table_cell_numbers_batch, question_ids_batch, ari_ops_batch, \
                opt_labels_batch, ari_labels_batch, opt_mask_batch, order_labels_batch, \
                selected_indexes_batch, question_mask_batch= zip(*batch)
            bsz = len(batch)
            input_ids = torch.LongTensor(bsz, 512)
            attention_mask = torch.LongTensor(bsz, 512)
            token_type_ids = torch.LongTensor(bsz, 512).fill_(0)
            paragraph_mask = torch.LongTensor(bsz, 512)
            table_mask = torch.LongTensor(bsz, 512)
            question_mask = torch.LongTensor(bsz, 512)
            paragraph_index = torch.LongTensor(bsz, 512)
            table_cell_index = torch.LongTensor(bsz, 512)
            tag_labels = torch.LongTensor(bsz, 512)
            operator_labels = torch.LongTensor(bsz)
            scale_labels = torch.LongTensor(bsz)

            ari_labels = torch.LongTensor([])
            selected_indexes = np.zeros([1, 11])

            opt_mask = torch.LongTensor(bsz)
            ari_ops = torch.LongTensor(bsz, self.num_ops)

            opt_labels = torch.LongTensor(bsz, self.num_ops - 1, self.num_ops - 1)

            order_labels = torch.LongTensor(bsz, self.num_ops)

            paragraph_tokens = []
            table_cell_tokens = []
            gold_answers = []
            question_ids = []
            paragraph_numbers = []
            table_cell_numbers = []
            for i in range(bsz):
                input_ids[i] = input_ids_batch[i]
                attention_mask[i] = attention_mask_batch[i]
                token_type_ids[i] = token_type_ids_batch[i]
                paragraph_mask[i] = paragraph_mask_batch[i]
                table_mask[i] = table_mask_batch[i]
                paragraph_index[i] = paragraph_index_batch[i]
                opt_mask[i] = opt_mask_batch[i]
                question_mask[i] = question_mask_batch[i]

                table_cell_index[i] = table_cell_index_batch[i]
                tag_labels[i] = tag_labels_batch[i]
                operator_labels[i] = operator_labels_batch[i]

                ari_ops[i] = torch.LongTensor(ari_ops_batch[i])
                if len(selected_indexes_batch[i]) != 0:
                    ari_labels = torch.cat((ari_labels, ari_labels_batch[i]), dim=0)
                    num = selected_indexes_batch[i].shape[0]
                    sib = np.zeros([num, 11])
                    for j in range(num):
                        sib[j, 0] = i
                        try:
                            sib[j, 1:] = selected_indexes_batch[i][j]
                        except:
                            print(selected_indexes_batch[i][j])
                            sib[j, 1:] = selected_indexes_batch[i][j][:10]
                    selected_indexes = np.concatenate((selected_indexes, sib), axis=0)

                order_labels[i] = order_labels_batch[i]
                opt_labels[i] = opt_labels_batch[i]
                scale_labels[i] = scale_labels_batch[i]
                paragraph_tokens.append(paragraph_tokens_batch[i])
                table_cell_tokens.append(table_cell_tokens_batch[i])
                paragraph_numbers.append(paragraph_numbers_batch[i])
                table_cell_numbers.append(table_cell_numbers_batch[i])
                gold_answers.append(gold_answers_batch[i])
                question_ids.append(question_ids_batch[i])

            out_batch = {"input_ids": input_ids, "attention_mask": attention_mask, "token_type_ids": token_type_ids,
                         "paragraph_mask": paragraph_mask, "paragraph_index": paragraph_index, "tag_labels": tag_labels,
                         "operator_labels": operator_labels, "scale_labels": scale_labels,
                         "paragraph_tokens": paragraph_tokens,
                         "table_cell_tokens": table_cell_tokens, "paragraph_numbers": paragraph_numbers,
                         "table_cell_numbers": table_cell_numbers, "gold_answers": gold_answers,
                         "question_ids": question_ids,
                         "table_mask": table_mask, "table_cell_index": table_cell_index, "ari_ops": ari_ops,
                         "ari_labels": ari_labels, "opt_labels": opt_labels, "opt_mask": opt_mask,
                         "order_labels": order_labels,
                         "selected_indexes": selected_indexes[1:], "question_mask": question_mask
                         }
            yield out_batch

class custom_data(Dataset.Dataset):
    def __init__(self, dpath):
        with open(dpath, 'rb') as f:
            print("Load data from {}.".format(dpath))
            data = pickle.load(f)
        all_data = []
        for item in data:
            input_ids = torch.from_numpy(item["input_ids"])
            attention_mask = torch.from_numpy(item["attention_mask"])
            token_type_ids = torch.from_numpy(item["token_type_ids"])
            paragraph_mask = torch.from_numpy(item["paragraph_mask"])
            table_mask = torch.from_numpy(item["table_mask"])
            paragraph_numbers = item["paragraph_number_value"]
            table_cell_numbers = item["table_cell_number_value"]
            paragraph_index = torch.from_numpy(item["paragraph_index"])
            table_cell_index = torch.from_numpy(item["table_cell_index"])
            tag_labels = torch.from_numpy(item["tag_labels"])
            operator_labels = torch.tensor(item["operator_label"])
            scale_labels = torch.tensor(item["scale_label"])
            gold_answers = item["answer_dict"]
            paragraph_tokens = item["paragraph_tokens"]
            table_cell_tokens = item["table_cell_tokens"]
            question_id = item["question_id"]
            opt_mask = item["opt_mask"]
            ari_ops = item["ari_ops"]
            opt_labels = item["opt_labels"]
            ari_labels = item["ari_labels"]
            selected_indexes = item["selected_indexes"]
            order_labels = item["order_labels"]
            question_mask = torch.from_numpy(item["question_mask"])
            all_data.append((input_ids, attention_mask, token_type_ids, paragraph_mask, table_mask, paragraph_index,
                             table_cell_index, tag_labels, operator_labels, scale_labels, gold_answers,
                             paragraph_tokens, table_cell_tokens, paragraph_numbers, table_cell_numbers,
                             question_id, ari_ops, opt_labels, ari_labels, opt_mask, order_labels, selected_indexes,
                             question_mask
                             ))
        print("Load data size {}.".format(len(all_data)))
        self.data = all_data

    def __getitem__(self, idx):
        return self.data[idx]

    def __len__(self):
        return len(self.data)
